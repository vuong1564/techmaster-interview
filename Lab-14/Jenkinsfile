pipeline {
    agent {
        // Sử dụng Docker agent với image xác định
        docker {
            image 'docker:stable'
            args '-v /var/run/docker.sock:/var/run/docker.sock' // Mount Docker socket để sử dụng Docker bên trong container
        }
    }

    environment {
        // Định nghĩa các biến môi trường nếu cần
        REGISTRY = "dockerhub_username" // Docker Registry
        IMAGE_NAME = "app_name" // Tên image Docker
    }

    stages {
        stage('Checkout') {
            steps {
                git 'https://github.com/username/repo.git' // Lấy mã nguồn từ Git
            }
        }

        stage('Build') {
            steps {
                script {
                    // Build image Docker
                    sh 'docker build -t ${IMAGE_NAME}:${BUILD_NUMBER} .'
                }
            }
        }

        stage('Test') {
            steps {
                script {
                    // Chạy các bài kiểm tra unit test hoặc integration test (nếu có)
                    sh 'docker run --rm ${IMAGE_NAME}:${BUILD_NUMBER} ./run_tests.sh'
                }
            }
        }

        stage('Push to Registry') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', 'dockerhub-credentials-id') {
                        // Push image lên Docker Hub
                        sh 'docker push ${REGISTRY}/${IMAGE_NAME}:${BUILD_NUMBER}'
                    }
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    // Triển khai ứng dụng lên server (ví dụ sử dụng Docker Compose)
                    sshagent(['deploy-server-credentials']) {
                        sh """
                            ssh user@your-server 'docker pull ${REGISTRY}/${IMAGE_NAME}:${BUILD_NUMBER} && \
                            docker-compose -f /path/to/docker-compose.yml up -d'
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            // Clean up Docker images để tránh lãng phí tài nguyên
            sh 'docker rmi ${IMAGE_NAME}:${BUILD_NUMBER} || true'
        }
    }
}
